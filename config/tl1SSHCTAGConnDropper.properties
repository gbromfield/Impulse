# This, given a verb and mod1, will initiate a connection disconnect after a delay

# To turn on debugging of all transforms
# transform.*.log4jLogLevel=DEBUG

# To turn on debugging for an individual transform
# transform.<name>.log4jLogLevel=DEBUG

impulse.byteArrayFormatterLimitSize=1024

transform.sshServer.classname=com.grb.impulse.plugins.SSHServer
transform.sshServer.listenPort=12346
transform.sshServer.hostKeyFilename=keys/host.ser
transform.sshServer.autoStart=true
link.out.sshServer.onNewConnection=tunnel.onNewConnection(SSHServer.SshServerClient.client)

# To run, the tunnel's serverIPPort property must be specified, you can
# 1. uncomment the property line below and insert your own ip address and port, or
# 2. specify -Dtransform.tunnel.serverIPPort=xxx.xxx.xxx.xxx:yyyyy on the command line
#transform.tunnel.serverIPPort=192.168.160.128:55555
#transform.tunnel.log4jLogLevel=DEBUG
transform.tunnel.classname=com.grb.impulse.plugins.SSHTunnel
transform.tunnel.log4jLogLevel=DEBUG
link.out.tunnel.onClientRead=tl1ManagerFramer.onData(SSHTunnel.ByteBuffer.inputBytes)
link.out.tunnel.onServerRead=tl1AgentFramer.onData(SSHTunnel.ByteBuffer.inputBytes)

transform.tl1AgentFramer.classname=com.grb.impulse.plugins.TL1AgentFramer
transform.tl1AgentFramer.log4jLogLevel=DEBUG
link.out.tl1AgentFramer.onTL1Message=tl1CTAGMatcher.onTL1In(TL1AgentFramer.TL1Message.tl1Message)

transform.tl1ManagerFramer.classname=com.grb.impulse.plugins.TL1ManagerFramer
transform.tl1ManagerFramer.log4jLogLevel=DEBUG
link.out.tl1ManagerFramer.onTL1Message=tl1CmdCodeMatcher.onTL1In(TL1ManagerFramer.TL1Message.tl1Message)

transform.tl1CmdCodeMatcher.classname=com.grb.impulse.plugins.TL1CmdMatcher
transform.tl1CmdCodeMatcher.log4jLogLevel=DEBUG

######## THIS IS WHERE THE MESSAGE THAT YOU WANT DELAYED IS DEFINED - YOU CAN SPECIFY ONE OR MANY AND ITS A REGEX ########
transform.tl1CmdCodeMatcher.verb=RTRV
transform.tl1CmdCodeMatcher.mod1=HDR
#transform.tl1CmdCodeMatcher.mod2=BLUB
#transform.tl1CmdCodeMatcher.tid=GAGA
link.out.tl1CmdCodeMatcher.onCmdMatch=tunnel.writeToServer(TL1ManagerFramer.ByteBuffer.bytesTL1Message); tl1CTAGMatcher.onSetCtag(TL1ManagerFramer.TL1Message.tl1Message)
link.out.tl1CmdCodeMatcher.onNoCmdMatch=tunnel.writeToServer(TL1ManagerFramer.ByteBuffer.bytesTL1Message)

transform.tl1CTAGMatcher.classname=com.grb.impulse.plugins.TL1CTAGMatcher
transform.tl1CTAGMatcher.log4jLogLevel=DEBUG
link.out.tl1CTAGMatcher.onCtagMatch=tl1InProgress.onTL1In(TL1AgentFramer.TL1Message.tl1Message)
link.out.tl1CTAGMatcher.onNoCtagMatch=tunnel.writeToClient(TL1AgentFramer.ByteBuffer.bytesTL1Message)

transform.tl1InProgress.classname=com.grb.impulse.plugins.TL1InProgress
transform.tl1InProgress.log4jLogLevel=DEBUG
######## THIS DETERMINES WHEN s AND HOW MANY IP MESSAGES TO SEND ########
transform.tl1InProgress.respDelayInMS=10000
transform.tl1InProgress.ipIntervalInMS=2000
link.out.tl1InProgress.onTL1AckOut=tunnel.writeToClient(TL1InProgress.ByteBuffer.bytesTL1Message)
link.out.tl1InProgress.onTL1RespOut=tunnel.writeToClient(TL1InProgress.ByteBuffer.bytesTL1Message); tunnel.onClose()
