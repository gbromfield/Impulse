# This tunnels traffic without doing anything to it 
# This is the same as the Tunnel but uses the Socket
# transform instead. 
# The Tunnel transform is better tested than the Socket
# transform. 

# To turn on debugging of all transforms
# transform.*.log4jLogLevel=DEBUG

# To turn on debugging for an individual transform
# transform.<name>.log4jLogLevel=DEBUG

transform.socketServer.classname=com.grb.impulse.plugins.SocketServer
transform.socketServer.listenPort=12346
transform.socketServer.autoStart=true
link.out.socketServer.onNewConnection=client.onNewConnection(SocketServer.TCPTransportClient.client)

transform.client.classname=com.grb.impulse.plugins.Socket
transform.client.log4jLogLevel=DEBUG
# start the client only when the server socket is connected
transform.client.autoStartRead=false
link.out.client.onRead=server.write(Socket.ByteBuffer.inputBytes)

transform.server.classname=com.grb.impulse.plugins.Socket
# To run, the socket's serverIPPort property must be specified, you can
# 1. uncomment the property line below and insert your own ip address and port, or
# 2. specify -Dtransform.server.serverIPPort=xxx.xxx.xxx.xxx:yyyyy on the command line
#transform.server.serverIPPort=192.168.160.128:55555
transform.server.log4jLogLevel=DEBUG
link.out.server.onRead=client.write(Socket.ByteBuffer.inputBytes)
# Only when the server is connected should the client be signalled to start reading.
link.out.server.onConnected=client.startReading()
