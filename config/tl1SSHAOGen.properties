# This, given a verb and mod1, will initiate a connection disconnect after a delay

# To turn on debugging of all transforms
# transform.*.log4jLogLevel=DEBUG

# To turn on debugging for an individual transform
# transform.<name>.log4jLogLevel=DEBUG

impulse.byteArrayFormatterLimitSize=1024

transform.sshServer.classname=com.grb.impulse.plugins.SSHServer
transform.sshServer.listenPort=12346
transform.sshServer.hostKeyFilename=keys/host.ser
transform.sshServer.autoStart=true
link.out.sshServer.onNewConnection=tl1Tunnel.onNewConnection(SSHServer.SshServerClient.client)

# To run, the tunnel's serverIPPort property must be specified, you can
# 1. uncomment the property line below and insert your own ip address and port, or
# 2. specify -Dtransform.tunnel.serverIPPort=xxx.xxx.xxx.xxx:yyyyy on the command line
#transform.tl1Tunnel.serverIPPort=192.168.160.128:55555
#transform.tl1Tunnel.log4jLogLevel=DEBUG
transform.tl1Tunnel.classname=com.grb.impulse.plugins.SSHTunnel
transform.tl1Tunnel.log4jLogLevel=DEBUG
link.out.tl1Tunnel.onClientRead=tl1ManagerFramer.onData(SSHTunnel.ByteBuffer.inputBytes)
link.out.tl1Tunnel.onServerRead=tl1AgentFramer.onData(SSHTunnel.ByteBuffer.inputBytes)

transform.tl1AgentFramer.classname=com.grb.impulse.plugins.TL1AgentFramer
transform.tl1AgentFramer.maxOutputMessageSizeInChars=100000
transform.tl1AgentFramer.log4jLogLevel=DEBUG
link.out.tl1AgentFramer.onTL1Message=tl1CTAGMatcher.onTL1In(TL1AgentFramer.TL1Message.tl1Message);tl1CTAGMatcher1.onTL1In(TL1AgentFramer.TL1Message.tl1Message)

transform.tl1ManagerFramer.classname=com.grb.impulse.plugins.TL1ManagerFramer
transform.tl1ManagerFramer.log4jLogLevel=DEBUG
link.out.tl1ManagerFramer.onTL1Message=tl1CmdMatcher.onTL1In(TL1ManagerFramer.TL1Message.tl1Message);tl1CmdMatcher1.onTL1In(TL1ManagerFramer.TL1Message.tl1Message)

transform.tl1CmdMatcher.classname=com.grb.impulse.plugins.TL1CmdMatcher
transform.tl1CmdMatcher.log4jLogLevel=DEBUG

######## THIS IS WHERE THE MESSAGE THAT YOU WANT DENIED IS DEFINED - YOU CAN SPECIFY ONE OR MANY, EACH FIELD IS A REGEX ########
#transform.tl1CmdMatcher.verb=(?!ACT).*
#transform.tl1CmdMatcher.verb=RTRV
#transform.tl1CmdMatcher.mod1=BACKPLANE
#transform.tl1CmdMatcher.mod2=ODU
transform.tl1CmdMatcher.verb=ALW
transform.tl1CmdMatcher.mod1=MSG
transform.tl1CmdMatcher.mod2=BROADCAST
# TO MATCH TIDS THAT ARE NOT SPECIFIED, LIKE FOR A GNE, USE A REGEX of ()
transform.tl1CmdMatcher.tid=()
#transform.tl1CmdMatcher.tid=PV0028A
link.out.tl1CmdMatcher.onCmdMatch=counter.onData()
link.out.tl1CmdMatcher.onNoCmdMatch=tl1Tunnel.writeToServer(TL1ManagerFramer.ByteBuffer.bytesTL1Message)

######## THIS INDICATES WHICH OCCURRENCE BY COUNT IS SELECTED
transform.counter.classname=com.grb.impulse.plugins.Counter
######## INDICATES WHICH MESSAGES TO DELAY - CAN BE AN NUMBER OR A RANGE
######## Example: 1,3-5,6,10- (matches the first, third to fifth, sixth, and tenth and greater pieces of data)
######## Example: * (matches all)
######## Example: - (matches none)
######## Example: even (matches even counts)
######## Example: odd (matches odd counts)
######## Example: 5th (matches every 5th)
######## Example: 50% (matches 50% of the data)
transform.counter.match=*
transform.counter.log4jLogLevel=DEBUG
link.out.counter.onMatch=tl1Tunnel.writeToServer(TL1ManagerFramer.ByteBuffer.bytesTL1Message); tl1CTAGMatcher.onSetCtag(TL1ManagerFramer.TL1Message.tl1Message)
link.out.counter.onNoMatch=tl1Tunnel.writeToServer(TL1ManagerFramer.ByteBuffer.bytesTL1Message)

transform.tl1CTAGMatcher.classname=com.grb.impulse.plugins.TL1CTAGMatcher
transform.tl1CTAGMatcher.log4jLogLevel=DEBUG
link.out.tl1CTAGMatcher.onCtagMatch=tl1Tunnel.writeToClient(TL1AgentFramer.ByteBuffer.bytesTL1Message); tl1AOGen.onStart()
link.out.tl1CTAGMatcher.onNoCtagMatch=tl1Tunnel.writeToClient(TL1AgentFramer.ByteBuffer.bytesTL1Message)

transform.tl1AOGen.classname=com.grb.impulse.plugins.TL1AOGenerator
transform.tl1AOGen.log4jLogLevel=DEBUG
#transform.tl1AOGen.ao=\r\n\n   PV0414A 93-06-02 12:00:00\r\nA  <ATAG> REPT BLUB\r\n   \"AID-T1-1:CVL,50\"\r\n   \"AID-T1-2:CVL,10\"\r\n   \"AID-T1-n:CVL,22\"\r\n;
#transform.tl1AOGen.ao=\r\n\n   PV0414A 93-06-02 12:00:00\r\nA  <ATAG> REPT CRS ODU\r\n   \"ODU4-11-25-1-1,ODU4-11-25-2-1:2WAY:ACTION=ADD"\r\n;
#transform.tl1AOGen.ao=\r\n\n   PV0414A 93-06-02 12:00:00\r\nA  <ATAG> REPT ALM ODU\r\n   \"ODU4-11-25-1-1,ODU4-11-25-2-1:2WAY:ACTION=ADD"\r\n;
transform.tl1AOGen.ao=\r\n\n   PV0414A 93-06-02 12:00:00\r\nA  <ATAG> REPT DBCHG\r\n   "DBCHGSEQ=2657,DATE=16-01-11,TIME=05-35-04,USERID=ADMIN,SOURCE=97,PRIORITY=GEN_TL1_CMD:ENT-CRS-ODU:ODU4-11-25-1-1,ODU4-11-25-2-1:2WAY:CKTID=\\\"GT\\\":"\r\n;
transform.tl1AOGen.aoNumber=10
transform.tl1AOGen.aoRate=1
transform.tl1AOGen.atag=1
transform.tl1AOGen.reportInterval=1
link.out.tl1AOGen.onAO=tl1Tunnel.writeToClient(TL1AOGenerator.ByteBuffer.bytesTL1Message)


transform.tl1CmdMatcher1.classname=com.grb.impulse.plugins.TL1CmdMatcher
transform.tl1CmdMatcher1.log4jLogLevel=DEBUG

######## THIS IS WHERE THE MESSAGE THAT YOU WANT DENIED IS DEFINED - YOU CAN SPECIFY ONE OR MANY, EACH FIELD IS A REGEX ########
#transform.tl1CmdMatcher1.verb=(?!ACT).*
transform.tl1CmdMatcher1.verb=RTRV
transform.tl1CmdMatcher1.mod1=CRS
transform.tl1CmdMatcher1.mod2=ODU
#transform.tl1CmdMatcher1.verb=ALW
#transform.tl1CmdMatcher1.mod1=MSG
#transform.tl1CmdMatcher1.mod2=BROADCAST
# TO MATCH TIDS THAT ARE NOT SPECIFIED, LIKE FOR A GNE, USE A REGEX of ()
#transform.tl1CmdMatcher1.tid=()
#transform.tl1CmdMatcher1.tid="PV0414B"
link.out.tl1CmdMatcher1.onCmdMatch=counter1.onData()
#link.out.tl1CmdMatcher1.onNoCmdMatch=tl1Tunnel.writeToServer(TL1ManagerFramer.ByteBuffer.bytesTL1Message)

######## THIS INDICATES WHICH OCCURRENCE BY COUNT IS SELECTED
transform.counter1.classname=com.grb.impulse.plugins.Counter
######## INDICATES WHICH MESSAGES TO DELAY - CAN BE AN NUMBER OR A RANGE
######## Example: 1,3-5,6,10- (matches the first, third to fifth, sixth, and tenth and greater pieces of data)
######## Example: * (matches all)
######## Example: - (matches none)
######## Example: even (matches even counts)
######## Example: odd (matches odd counts)
######## Example: 5th (matches every 5th)
######## Example: 50% (matches 50% of the data)
transform.counter1.match=2
transform.counter1.globalCounter=true
transform.counter1.log4jLogLevel=DEBUG
link.out.counter1.onMatch=tl1CTAGMatcher1.onSetCtag(TL1ManagerFramer.TL1Message.tl1Message)
#link.out.counter1.onNoMatch=tl1Tunnel.writeToServer(TL1ManagerFramer.ByteBuffer.bytesTL1Message)

transform.tl1CTAGMatcher1.classname=com.grb.impulse.plugins.TL1CTAGMatcher
transform.tl1CTAGMatcher1.log4jLogLevel=DEBUG
link.out.tl1CTAGMatcher1.onCtagMatch=tl1Tunnel.onClose()
#link.out.tl1CTAGMatcher1.onCtagMatch=tl1AOGen1.onStart()
#link.out.tl1CTAGMatcher1.onNoCtagMatch=tl1Tunnel.writeToClient(TL1AgentFramer.ByteBuffer.bytesTL1Message)

transform.tl1AOGen1.classname=com.grb.impulse.plugins.TL1AOGenerator
transform.tl1AOGen1.log4jLogLevel=DEBUG
transform.tl1AOGen1.ao=\r\n\n   PV0414B 93-06-02 12:00:00\r\nA  <ATAG> REPT BLUB\r\n   \"AID-T1-1:CVL,50\"\r\n   \"AID-T1-2:CVL,10\"\r\n   \"AID-T1-n:CVL,22\"\r\n;
transform.tl1AOGen1.aoNumber=10000
transform.tl1AOGen1.aoRate=50
transform.tl1AOGen1.atag=1
link.out.tl1AOGen1.onAO=tl1Tunnel.writeToClient(TL1AOGenerator.ByteBuffer.bytesTL1Message)
