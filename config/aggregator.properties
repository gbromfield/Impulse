# Clones input data into 2, passes it off to the aggregator that waits
# for 2 and then outputs.

# To turn on debugging of all transforms
# transform.*.log4jLogLevel=DEBUG

# To turn on debugging for an individual transform
# transform.<name>.log4jLogLevel=DEBUG

transform.socketServer.classname=com.grb.impulse.plugins.SocketServer
transform.socketServer.listenPort=12346
transform.socketServer.autoStart=true
link.out.socketServer.onNewConnection=tunnel.onNewConnection(SocketServer.TCPTransportClient.client)

# To run, the tunnel's serverIPPort property must be specified, you can
# 1. uncomment the property line below and insert your own ip address and port, or
# 2. specify -Dtransform.tunnel.serverIPPort=xxx.xxx.xxx.xxx:yyyyy on the command line
transform.tunnel.classname=com.grb.impulse.plugins.Tunnel
transform.tunnel.log4jLogLevel=DEBUG
#transform.tunnel.serverIPPort=192.168.160.128:55555
link.out.tunnel.onClientRead=cloner.onData(Tunnel.ByteBuffer.inputBytes)
link.out.tunnel.onServerRead=tunnel.writeToClient(Tunnel.ByteBuffer.inputBytes)

transform.cloner.classname=com.grb.impulse.plugins.Cloner
transform.cloner.log4jLogLevel=DEBUG
link.out.cloner.onOutput=aggregator.onData(Cloner.ByteBuffer.clone)

transform.aggregator.classname=com.grb.impulse.plugins.Aggregator
transform.aggregator.aggregate=2
transform.aggregator.cyclic=true
transform.aggregator.log4jLogLevel=DEBUG
link.out.aggregator.onOutput=tunnel.writeToServer(Aggregator.ByteBuffer.aggregate)
