# This frames incoming TL1 messages from a client and server

# To turn on debugging of all transforms
# transform.*.log4jLogLevel=DEBUG

# To turn on debugging for an individual transform
# transform.<name>.log4jLogLevel=DEBUG

impulse.byteArrayFormatterLimitSize=1024

transform.socketServer.classname=com.grb.impulse.plugins.SocketServer
transform.socketServer.listenPort=12346
transform.socketServer.autoStart=true
link.out.socketServer.onNewConnection=tunnel.onNewConnection(SocketServer.TCPTransportClient.client)

# To run, the tunnel's serverIPPort property must be specified, you can
# 1. uncomment the property line below and insert your own ip address and port, or
# 2. specify -Dtransform.tunnel.serverIPPort=xxx.xxx.xxx.xxx:yyyyy on the command line
transform.tunnel.classname=com.grb.impulse.plugins.Tunnel
#transform.tunnel.serverIPPort=192.168.160.128:55555
#transform.tunnel.log4jLogLevel=DEBUG
link.out.tunnel.onClientRead=javascript:config/print.js:printConnectionContext;tl1ManagerFramer.onData(Tunnel.ByteBuffer.inputBytes)
link.out.tunnel.onServerRead=javascript:config/print.js:printConnectionContext;tl1AgentFramer.onData(Tunnel.ByteBuffer.inputBytes)

transform.tl1AgentFramer.classname=com.grb.impulse.plugins.TL1AgentFramer
transform.tl1AgentFramer.log4jLogLevel=DEBUG
link.out.tl1AgentFramer.onTL1Message=javascript:config/print.js:printConnectionContext;tunnel.writeToClient(TL1AgentFramer.ByteBuffer.bytesTL1Message)

transform.tl1ManagerFramer.classname=com.grb.impulse.plugins.TL1ManagerFramer
transform.tl1ManagerFramer.log4jLogLevel=DEBUG
link.out.tl1ManagerFramer.onTL1Message=javascript:config/print.js:printConnectionContext;tunnel.writeToServer(TL1ManagerFramer.ByteBuffer.bytesTL1Message)
