# Prints out TL1 messages

# To turn on debugging of all transforms
# transform.*.log4jLogLevel=DEBUG

# To turn on debugging for an individual transform
# transform.<name>.log4jLogLevel=DEBUG

impulse.byteArrayFormatterLimitSize=1024

transform.telnetServer.classname=com.grb.impulse.plugins.TelnetServer
transform.telnetServer.listenPort=12346
transform.telnetServer.autoStart=true
link.out.telnetServer.onNewConnection=tunnel.onNewConnection(TelnetServer.IoSession.client)

# To run, the tunnel's serverIPPort property must be specified, you can
# 1. uncomment the property line below and insert your own ip address and port, or
# 2. specify -Dtransform.tunnel.serverIPPort=xxx.xxx.xxx.xxx:yyyyy on the command line
transform.tunnel.classname=com.grb.impulse.plugins.TelnetTunnel
#transform.tunnel.serverIPPort=192.168.160.128:55555
#transform.tunnel.log4jLogLevel=DEBUG
link.out.tunnel.onClientDataRead=tl1ManagerFramer.onData(TelnetTunnel.ByteBuffer.inputByteBuffer)
link.out.tunnel.onClientControlRead=tunnel.writeIOBufferToServer(TelnetTunnel.IoBuffer.inputIOBuffer)
link.out.tunnel.onServerDataRead=tl1AgentFramer.onData(TelnetTunnel.ByteBuffer.inputByteBuffer)
link.out.tunnel.onServerControlRead=tunnel.writeIOBufferToClient(TelnetTunnel.IoBuffer.inputIOBuffer)

transform.tl1AgentFramer.classname=com.grb.impulse.plugins.TL1AgentFramer
transform.tl1AgentFramer.log4jLogLevel=DEBUG
link.out.tl1AgentFramer.onTL1Message=tunnel.writeByteBufferToClient(TL1AgentFramer.ByteBuffer.bytesTL1Message)

transform.tl1ManagerFramer.classname=com.grb.impulse.plugins.TL1ManagerFramer
transform.tl1ManagerFramer.log4jLogLevel=DEBUG
link.out.tl1ManagerFramer.onTL1Message=javascript:config/print.js:printConnectionContext; tunnel.writeByteBufferToServer(TL1ManagerFramer.ByteBuffer.bytesTL1Message)
