# this fragments data from the server into 100 byte
# fragments and puts a 1000ms delay between sending them to the
# client. This can be used for testing a clients framing of messages. 

# To turn on debugging of all transforms
# transform.*.log4jLogLevel=DEBUG

# To turn on debugging for an individual transform
# transform.<name>.log4jLogLevel=DEBUG

transform.socketServer.classname=com.grb.impulse.plugins.SocketServer
transform.socketServer.listenPort=12346
transform.socketServer.autoStart=true
link.out.socketServer.onNewConnection=tunnel.onNewConnection(SocketServer.TCPTransportClient.client)

# To run, the tunnel's serverIPPort property must be specified, you can
# 1. uncomment the property line below and insert your own ip address and port, or
# 2. specify -Dtransform.tunnel.serverIPPort=xxx.xxx.xxx.xxx:yyyyy on the command line
transform.tunnel.classname=com.grb.impulse.plugins.Tunnel
#transform.tunnel.serverIPPort=192.168.160.128:55555
link.out.tunnel.onClientRead=tunnel.writeToServer(Tunnel.ByteBuffer.inputBytes)
link.out.tunnel.onServerRead=fragger.fraggerIn(Tunnel.ByteBuffer.inputBytes)

transform.fragger.classname=com.grb.impulse.plugins.Fragger
transform.fragger.fragmentSize=100
transform.fragger.fragmentDelay=1000
transform.fragger.log4jLogLevel=DEBUG
link.out.fragger.fraggerOut=tunnel.writeToClient(Tunnel.ByteBuffer.inputBytes)
